global !p
def getImports(mnemo):
	if(mnemo == "r"):
		return 'import random'
	if(mnemo == "s"):
		return 'import sys'
	if(mnemo == "m"):
		return 'import math'
	if(mnemo == "ap"):
		return 'import argparse'
	if(mnemo == "mp"):
		return 'import matplotlib.pyplot as plt'
	return 'import'

def forLoop(variable, start, end):
	res = 'for ' + variable + ' in range('
	if(start == '0'):
		return res + end + '):'
	if(end == ""):
		return res + start + '):'
	if(start == ""):
		return res + end + '):'

def getPreviousLine():
	# line = vim.current.window.cursor[0] #<-this causes error ... cyclic error
	line = snip.snippet_start[0]
	if line >= 1 :
		return vim.current.window.buffer[line-1]
	return "" 

def getLastReadArgument(line):
	regexp = r'argv\[(\d+)\]'
	srchRes = re.search(regexp, line)
	if srchRes:
		num = srchRes.group(1)
		return int(num) + 1
	return 1

def getLHS(expression):
	sides = expression.split('=') 
	if(len(sides)>1):
		return sides[0].strip()
	return ''

def getVariable(line):
	return getLHS(line)

def getIntegerMatrix(l,c):
	res=[[0]*c for i in range(l)]
	count = 0
	for i in range(l):
		for j in range(c):
			res[i][j] = count
			count += 1
	return res
endglobal
	
snippet "im(\S+)" "import..." br
`!p snip.rv=getImports(match.group(1))`
endsnippet
snippet imms "import sys math" b
import sys
import math
endsnippet
snippet imsm "import sys math" b
import sys
import math
endsnippet

snippet "a([0-9]+)?" "sys arg" br
${1:arg`!p
line=getPreviousLine()
n=getLastReadArgument(line)
snip.rv=match.group(1) or n`} = sys.argv[`!p snip.rv=match.group(1) or n`]
endsnippet
snippet "ia([0-9]+)?" "sys arg as int" br
${1:arg`!p
line=getPreviousLine()
n=getLastReadArgument(line)
snip.rv=match.group(1) or n`} = int(sys.argv[`!p snip.rv=match.group(1) or n`])
endsnippet
snippet "fa([0-9]+)?" "sys arg as float" br
${1:arg`!p
line=getPreviousLine()
n=getLastReadArgument(line)
snip.rv=match.group(1) or n`} = float(sys.argv[`!p snip.rv=match.group(1) or n`])
endsnippet


snippet dap "declare argument parser" b
parser = argparse.ArgumentParser(description='$1')
endsnippet
snippet dargs "declare args" b
args = parser.parse_args()
endsnippet
snippet pai "parse argument as integer" b
parser.add_argument('$1', type=int, help='${2:help for }')
endsnippet
snippet pab "parse argument as boolean" b
parser.add_argument('$1', help='${2:help for }', action='store_true')
endsnippet
snippet paf "parse argument as float" b
parser.add_argument('$1', type=float, help='${2:help for }')
endsnippet

snippet "for([a-z]+) ?([0-9]*)(([0-9a-zA-Z]+)?)" "for range with count : fori10 forj14" br
`!p
var = match.group(1)
start = match.group(2)
end = match.group(3)
snip.rv=forLoop(var,start,end)`
	${0:${VISUAL}}
endsnippet
snippet "(\[.*\])\*([^*]+)\*([^*]+)" "[0]*m*n" r
[`!p
content = match.group(1)
colmns = match.group(2)
lines = match.group(3)
res = content + '*' + colmns + ' for i in range(' + lines +')'
snip.rv=res`]
endsnippet

snippet "intmatr([1-9])([1-9])" "integer matrix" r
`!p
l = int(match.group(1))
c= int(match.group(2))
snip.rv=getIntegerMatrix(l,c)`
endsnippet
snippet lgv "log variable"
print(`!p
line=getPreviousLine()
var=getVariable(line)
res='"' + var + '", ' + var
snip.rv=res`)
endsnippet
snippet # "env" b
#!/usr/bin/env python3
endsnippet
