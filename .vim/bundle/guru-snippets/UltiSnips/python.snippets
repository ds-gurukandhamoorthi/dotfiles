global !p
def getImports(mnemo):
	if(mnemo == "r"):
		return 'import random'
	if(mnemo == "s"):
		return 'import sys'
	if(mnemo == "m"):
		return 'import math'
	return 'import'

def forLoop(variable, start, end):
	res = 'for ' + variable + ' in range('
	if(start == '0'):
		return res + end + '):'
	if(end == ""):
		return res + start + '):'

def getPreviousLine():
	# line = vim.current.window.cursor[0] #<-this causes error ... cyclic error
	line = snip.snippet_start[0]
	res = vim.current.window.buffer[line-1]
	return res 

def getLastReadArgument(line):
	regexp = r'argv\[(\d+)\]'
	num = re.search(regexp, line).group(1)
	return int(num) + 1
endglobal
	
snippet "im(\S+)" "import..." br
`!p snip.rv=getImports(match.group(1))`
endsnippet
snippet imms "import sys math" b
import sys
import math
endsnippet
snippet imsm "import sys math" b
import sys
import math
endsnippet

snippet "a([0-9]+)?" "sys arg" br
`!p line=getPreviousLine();n=getLastReadArgument(line);`${1:arg`!p snip.rv=match.group(1) or n`} = sys.argv[`!p snip.rv=match.group(1) or n`]
endsnippet
snippet "ia([0-9]+)?" "sys arg" br
`!p line=getPreviousLine();n=getLastReadArgument(line);`${1:arg`!p snip.rv=match.group(1) or n`} = int(sys.argv[`!p snip.rv=match.group(1) or n`])
endsnippet
snippet "fa([0-9]+)?" "sys arg" br
`!p line=getPreviousLine();n=getLastReadArgument(line);`${1:arg`!p snip.rv=match.group(1) or n`} = float(sys.argv[`!p snip.rv=match.group(1) or n`])
endsnippet
snippet testnother
`!p snip.rv=getPreviousLine()`
endsnippet

snippet "for([a-z]+)([0-9]+)([0-9a-zA-Z]?)" "for range with count : fori10 forj14" br
`!p snip.rv=forLoop(match.group(1), match.group(2), match.group(3))`
	${0:${VISUAL}}
endsnippet
