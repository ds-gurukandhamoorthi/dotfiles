snippet imr
import React from 'react';

endsnippet
snippet imrc
import React, {Component} from 'react';

endsnippet
snippet impt
import PropTypes from 'prop-types';

endsnippet
snippet bind
this.${1}=this.$1.bind(this);

endsnippet

snippet cwm
componentWillMount(){
	$1
}
$0
endsnippet

snippet cwum
componentWillUnmount(){
	$1
}
$0
endsnippet

snippet cwrp
componentWillReceiveProps(nextProps){
	$1
}
$0
endsnippet
snippet imf
import fetch from 'isomorphic-fetch';

endsnippet
snippet cc
class ${1:`!v expand('%:t:r')`} extends Component{
	$0
}
endsnippet
snippet ed
export default ${1:`!v expand('%:t:r')`};
endsnippet
snippet ren
render() {
	$0
}
endsnippet
snippet con
constructor(props){
	super(props);
	$1
}
endsnippet

snippet ec
export const `!p snip.rv=upperCaseUnderscore(t[1])`="`!p snip.rv=upperCaseUnderscore(t[1])`"; //$1

endsnippet



snippet im
import ${1} from '${2}`!p snip.rv=getRelevantModule(getSingleWord(t[1]))`';

endsnippet

snippet des
describe('$1', ()=>{
$0
});
endsnippet

snippet it
it('$1', ()=>{
$0
});
endsnippet








global !p
from os import  path

def getWorkingDirectory():
	return vim.eval('expand("%:p:h")')

def getTagsFile():
	wd = getWorkingDirectory()
	if path.exists(wd + '/tags'):
		return wd + '/tags'
	if path.exists(wd + '/src/tags'):
		return wd + '/src/tags'
	srcdirec = wd[:wd.rfind("src/")+3]
	if path.exists(srcdirec + '/tags'):
		return srcdirec + '/tags'
	return ""

def getRelevantModuleFromTags(nameComponent):
	if nameComponent == "":
		return ""
	tagFile = getTagsFile()
	if tagFile == "" :
		return ""
	with open(tagFile) as f:
		for line in f:
			if line.startswith(nameComponent):
				filenamepath=line.split('\t')[1]
				result=os.path.relpath(filenamepath, getWorkingDirectory())
				result=result if result.startswith('.') else "./" + result
				result=result.replace('.js','')
				result = result[:-6] if result.endswith('/index') else result
				return result
	return ""

def getSingleWord(nameComponent):
	return nameComponent.split(',')[0].replace('{','').replace('}','')

def upperCaseUnderscore(text):
	return text.upper().replace(' ','_')

def getSrcDirec():
	wd = getWorkingDirectory()
	if(wd.endswith('src')):
		return wd
	if path.exists(wd + '/src'):
		return wd + '/src'
	srcdirec = wd[:wd.rfind("src/")+3]
	return srcdirec

def getRelevantModule(nameComponent):
	if nameComponent == "":
		return ""
	proc =os.popen('ag -l --js' + ' ^export[^=]*'+nameComponent +'[^=]* ' + getSrcDirec());
	res = proc.read()
	proc.close()
	res = res.split('\n')[0];
	if res == "":
		return ""
	cmnpathprfx=os.path.commonprefix([res,getWorkingDirectory()]);
	return os.path.relpath(res,cmnpathprfx)



endglobal
