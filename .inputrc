"\C-xk": kill-region

# go back WORD. (taking only into account space". The \eb\ef it to escape any space near the point where we issue the command that could befuddle the macro
"\eB": "\eb\ef\e\C-] \C-f"
"\eF": "\C-] "
# even though it is tempting to use \eW to resemble emacs it wouldn't be consistent with our other emacs bindings

# Found in Bash manual "Macros that are convenient for shell interaction".
# Quoted insert for strings (double and single). No need to limit it for Bash. R may profit by it too
"\C-x\"": "\"\"\C-b"
"\C-x'": "''\C-b"

#Surround line with parentheses
"\C-xb": "\C-e)\C-a(\C-b"

#Evaluate line
$if Bash
    "\C-x=":  "\C-e'\C-abc <<< '\C-j"
$endif

#dictionary-lookup-line. Know more about... a word...
$if Bash
    "\C-x?":  "\C-awn \C-e -over\C-j"
$endif



# incremental search. It is better not to bind these to C-p C-n or ordinary arrows, as what we want most of the time is execute the last entered command ^p^j <up><enter>
# The original binding to non-incremental-reverse-search-history is not that helpful
"\ep": history-substring-search-backward
"\en": history-substring-search-forward
#sh finds 'ssh ...' with history-substring-search-backward. To limit it to beginning '^' functions. Example '^pov' only finds 'pov..' and not 'ls ..pov'. But '$' regexp seems not to function with it..

#NOTE: if the use-case is for prefix-only the following functions can be bound. (Mnemonic: as ctrl key is often represented as ^. This could be thought of as the ^ of regexp 'starting-with'
# If it's for multiple search it's much better to use '^prefix' followed by multiple '\ep' rather than 'prefix' followed by multiple '\eC-p'
"\e\C-p": history-search-backward
"\e\C-n": history-search-forward

#alternative vim-like shortcut for the same functionality
"\C-x\C-l": history-search-backward

#Can be thought of as fix-prefix or change program. 'my-program arg1 arg2 arg3' delete my-program in bash. my.function(a, b, c). deletes my.function in R
$if Bash
    "\C-xp": "\C-a\ed"
$endif
$if R
    "\C-xp": "\C-a\C-](\C-u"
$endif

#Can be thought of as fix-arguments. 'my-program arg1 arg2 arg3' deletes args in bash. my.function(a, b, c). deletes my.function in R
$if Bash
    "\C-xa": "\C-a\ef\C-k "
    #NOTE: write a controlled kill only if it is needed. There is the problem of the surrounding not being unique "cat $(prog args)" or "cat `prog args`"
$endif
$if R
    "\C-xa": "\C-a\C-](\C-k()\C-b"
    "\C-x\C-a": "\e\C-](\C-f\e \C-])\C-xk" #CAUTION: This needs the \C-xk kill-region binding.
    # This last can be thought of as controlled-kill (selective kill). we only remove argument from the last  nest function. func1(func2(func3(arg-that-will-be-deleted)))j
$endif

# 'open-with-editor' (known in readline as edit-and-execute) As R doesn't implement this shortcut, fix-and-assign. CAUTION: this changes the value of the variable. Can be used more as a quickfix
$if R
    "\C-x\C-e": "\C-afix(\C-e)\C-j"
$endif

"\e[A": ""
"\e[B": ""
"\e[C": ""
"\e[D": ""

#If we want to force the use of ^j the following would disable both 'Return' and '^m'
# "\C-m": ""

#Though backspace is helpful when rubbing-out last char while typing, it sometimes allows us to hold it down to delete upto the beggining of the line.
#We want to grow conscious of its use.. and then we can comment out the following line.
"\C-?": ""
# "qr\e": "abc"

# Disable Home and End button to force use ^a and ^e respectively. Note. Surprisingly ^[ (escape) followed by [ 1 ~ functions as Home too. It may be because a multi-sequence encoding was needed
"[1~": ""
"[4~": ""

#Note: Similar to the ^[[1~ ^[[2 ... ^[[6 are keys above the arrow keys
